#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

IFS=' '

get_range () {
	local local_sha=$1
	local remote_sha=$2
	if [ "$remote_sha" = "$z40" ]
	then
		# New branch, examine all commits
		echo "$local_sha"
	else
		echo "$remote_sha".."$local_sha"
	fi
}

reject_email () {
	# So that I don't accidentally push
	local range=$1
	local reject_pattern="`git config --get hooks.var-reject-email`"
	for pat in $reject_pattern
	do
		if [ -n "${pat}" ]
		then
			git log --format="%ae::%ce" "$range" | grep -qv "${pat}" || return $?
		fi
	done
}

check_wip_commit () {
	# reject commits with WIP in commit message
	local range=$1
	local local_ref=$2

	commit=`git rev-list -n 1 --grep '\bWIP\b' "$range"`
	if [ -n "$commit" ]
	then
		echo "Found WIP commit ($commit) in $local_ref, not pushing"
		return 1
	fi
}

set -e
set +x

while read local_ref local_sha remote_ref remote_sha
do
	range=`get_range $local_sha $remote_sha`
	reject_email "$range" || exit $?
	check_wip_commit "$range" "$local_ref" || exit $?
done

# exit 127

# eof
