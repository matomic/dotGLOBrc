BASHRC_FILE=${HOME}/.bashrc
[[ -e ${BASHRC_FILE} ]] || {
	printf "BASHRC_FILE=${BASHRC_FIL} does not exist" > /dev/stderr
	false
}
if [[ -L ${BASHRC_FILE} ]]; then
	for candidate in {,${HOME}/}$(readlink ${BASHRC_FILE}); do
		[[ -f "${candidate}" ]] && {
			BASHRC_FILE=${candidate}
			break
		}
	done
fi
BASHRC_DIR=$(dirname ${BASHRC_FILE})

source ${BASHRC_DIR}/helper.sh

## Source enviornmental variables {{{
usrenvdir="${HOME}/.bashenv.d"
source_files_in_dir ${usrenvdir} "*.env"
## }}}

## Interactive shell test {{{
# This file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output.  So make sure this doesn't display
# anything or bad things will happen !

# Test for an interactive shell.  There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]]; then
	# Shell is non-interactive.  Be done now!
	return
fi
## }}}

# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

# Enable history appending instead of overwriting.  #139609
shopt -s histappend

# Run some login shell scripts for non-login shell
# for _sh in /etc/profile.d/*.sh ; do
# 	[ -r "$_sh" ] && . "$_sh"
# done
# unset _sh

function _update_ps1() {
	PS1=$($HOME/.local/bin/powerline-shell $?)
}

function _powerline_shell() {
	if [[ -f $local_bin/powerline-shell ]]; then
		if [[ $TERM != linux && ! $PROMPT_COMMAND =~ _update_ps1 ]]; then
			PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
			return 0
		fi
	fi
	return 1
}

function _powerline_status_local() {
	local local_python=$HOME/.local/lib/python3.11
	local local_bin=$HOME/.local/bin
	if [[ -f $local_python/site-packages/powerline/bindings/bash/powerline.sh ]]; then
		export PATH=$PATH:$local_bin$
		$local_bin/powerline-daemon -q
		POWERLINE_BASH_CONTINUATION=1
		POWERLINE_BASH_SELECT=1
		source $local_python/site-packages/powerline/bindings/bash/powerline.sh
		return 0
	fi
	return 1
}

function _powerline_status_sys() {
	if which powerline-daemon > /dev/null; then
		powerline-daemon -q
		POWERLINE_BASH_CONTINUATION=1
		POWERLINE_BASH_SELECT=1
		source /usr/share/powerline/bindings/bash/powerline.sh
		return 0
	fi
	return 1
}

function _no_powerline() {
	# Change the window title of X terminals
	case ${TERM} in
		xterm* | rxvt* | Eterm | aterm | kterm | gnome* | interix)
			PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
			;;
		screen)
			PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
			;;
	esac
}

# Powerline configuration
_powerline_shell || _powerline_status_local || _powerline_status_sys || _no_powerline

unset _powerline_shell
unset _powerline_status_local
unset _powerline_status_sys
unset _no_powerline

# Initialize SSH and GPG key agents using keychain
source ${BASHRC_DIR}/keychain.sh
init_keychain #2> /dev/null
export GPG_TTY=$(tty)

source ${BASHRC_DIR}/color.sh
source ${BASHRC_DIR}/alias.sh

### }}}

## vim: foldmethod=marker ft=sh noet sta ts=2 sw=2
