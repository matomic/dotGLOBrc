if isdirectory(expand("$XDG_CONFIG_HOME/vim"))
  let $VIMRTP = expand("$XDG_CONFIG_HOME/vim")
elseif isdirectory(expand("$HOME/.config/vim"))
  let $VIMRTP = expand("$HOME/.config/vim")
else
  let $VIMRTP = expand("$HOME/.vim")
endif

set nocompatible              " be iMproved, required
filetype off                  " required

"" INCLUDES {{{
if filereadable(expand("$HOME/.vimrc.local"))
  so $HOME/.vimrc.local
elseif filereadable(expand("$VIMRTP/vimrc.local"))
  so $VIMRTP/vimrc.local
elseif filereadable(expand("$HOME/_vimrc.local"))
  so $HOME/_vimrc.local
elseif filereadable(expand("$VIM/_vimrc.local"))
  so $VIM/_vimrc.local
else
  filetype plugin indent on
endif
"" }}} end includes

so $VIMRTP/plugin.vim
so $VIMRTP/funcdef.vim
so $VIMRTP/keymaps.vim
so $VIMRTP/colors.vim
so $VIMRTP/autocmd.vim

"" BASIC OPTIONS {
set shiftwidth=4       " number of spaces to use for autoindenting
set shiftround         " use multiple of shiftwidth when indenting with '<' and '>'
set tabstop=4          " tab size
set noexpandtab        " use space for tab
set smarttab           " use sw for front tab, ts else
set showmatch          " show matching bracket
set ffs=unix,dos       " refers unix format

set nolz               " (lazyredraw) Don't update the display while executing macro
set showmode           " Show which mode you are in
set modeline           " Use modeline to customize setting
set modelines=1        " number of mode line to check
set wildmenu           " Enalbed enhanced command-line completion
set mousehide          " hide mouse cursor while typing
set shellslash         " (for windows) use \ for shell
set laststatus=2       " always put a status line in, even if there is only one window
"set diffopt+=iwhite    " ignore white space
if &diff
    set diffopt-=internal  " invalid on MacOS Catalina
    set diffopt+=vertical  " not sure why this is not the default.
endif
if exists("&cot")      " (version >= 7.2)
  set cot=longest,menu " complete option
en

set nobackup
set noswapfile

set backspace=indent,eol,start " so that backspace works in Windows:

set list
set listchars=eol:$,tab:>.,trail:.,extends:#,nbsp:.

"" } end basic

if 1
  "define 3 custom highlight groups
  hi User1 ctermbg=yellow ctermfg=white  guibg=yellow guifg=white
  hi User2 ctermbg=red    ctermfg=white  guibg=red    guifg=white
  hi User3 ctermbg=blue   ctermfg=white  guibg=blue   guifg=white
  hi User4 ctermbg=green  ctermfg=white  guibg=green  guifg=white

  hi User6 ctermbg=red    ctermfg=yellow guibg=red    guifg=green
  hi User7 ctermbg=blue   ctermfg=red    guibg=blue   guifg=yellow
  hi User8 ctermbg=green  ctermfg=blue   guibg=yellow guifg=red

  set stl=
  set stl+=%1*%0.30f            " file path
  set stl+=%#error#%m%1*        " modified flag
  set stl+=%y                   " filetype
  set stl+=[%{&fileformat}]     " [fileformat]
  set stl+=%<                   " cut
  set stl+=%6*ðŸž‚%2*              " transition 1
  set stl+=Buf:#%n              " Buffer number
  set stl+=%7*ðŸž‚%3*              " transition 2
  set stl+=%rLine:\ %l/%L[%p%%] " line number / total [percentage]
  set stl+=%8*ðŸž‚%4*              " transition 3
  set stl+=Col:%c               " Column number[highlight syntax]
  set stl+=[%b-0x%B]            " char under cursor
  "set stl+=[%{synIDattr(synID(line('.'),col('.'),1),'name')}] " hightlight
  set stl+=[hi:%{SyntaxItem()}]
endif

set grepprg=grep\ -nH\ $*
let g:tex_flavor = "latex"

"" vim:fenc=utf-8 tw=80 sw=2 sts=2 et foldmethod=marker foldmarker={{{,}}} foldlevel=0 iskeyword+=-
