set sw=2         " auto indent size
set ts=2         " tab size
set et           " use space for tab
set sta          " use sw for front tab, ts else
set sm           " show matching bracket 
set ffs=unix,dos " refers unix format

set lazyredraw   " Don't update the display while executing macro
set showmode     " Show which mode you are in
set wildmenu     " Enalbed enhanced command-line completion
set mousehide    " hide mouse cursor while typing
set shellslash   " (for windows) use \ for shell
set laststatus=2 " always put a status line in, even if there is only one window

"" my settings
" Set the status line the way I like it
set stl=%f\ %m\ %r\ Line:\ %l/%L[%p%%]\ Col:\ %c\ Buf:\ #%n\ [%b][0x%B]

"" Some customized key maps
" edit .vimrc
nmap <silent> ,ev :e $MYVIMRC<cr>
nmap <silent> ,gev :e $MYGVIMRC<cr>
" source .vimrc
nmap <silent> ,sv :so $MYVIMRC<cr>
nmap <silent> ,gsv :so $MYGVIMRC<cr>

" write
nmap <silent> ;vw :w<cr>
nmap <silent> ;vwa :wa<cr>
nmap <silent> ;vwq :wq<cr>
"nmap <silent> ;vw! :w!<cr>
" quite
nmap <silent> ;vq :q<cr>
nmap <silent> ;vqa :qa<cr>
nmap <silent> ;vq! :q!<cr>

" toggle paste mode
nmap ,p :set paste!<cr>:set paste?<cr>
" toggle highlighted search
nmap ,n :set invhls<cr>:set hls?<cr>
" toggle textwrap
nmap ,w :set wrap!<cr>:set wrap?<cr>
" retable entire file
nmap ,rr :1,$retab<cr>
" cd to directory of current buffer
nmap ,cd :lcd %:p:h<cr>
" display current directory
nmap ,pwd :pwd<cr>

" Go to previous buffer
nmap <silent> ;j :bprevious<cr>
" Go to next buffer
nmap <silent> ;k :bnext<cr>
" Delete current buffer
nmap <silent> ;dc :bdelete<cr>
nmap <silent> ;dc! :bdelete!<cr>

" Move the cursor to the window left of the current one
noremap <silent> ,h :wincmd h<cr>
" Move the cursor to the window below the current one
noremap <silent> ,j :wincmd j<cr>
" Move the cursor to the window above the current one
noremap <silent> ,k :wincmd k<cr>
" Move the cursor to the window right of the current one
noremap <silent> ,l :wincmd l<cr>

"black background
set background=dark

" The main changes I make to the colours is make Function a tad brighter so
" it's more readable. Also, I prefer darkcyan for my comments. I don't 
" like comments to be "louder" than the actual code.
" This is a hack of the clour section in 
" /usr/share/vim/syntax/syntax.vim

if &background == "dark"
  hi Constant term=underline ctermfg=Magenta guifg=Magenta
  hi Function term=bold  ctermfg=White guifg=LightRed
  hi Identifier term=underline cterm=bold guifg=#40ffff ctermfg=Cyan
  hi Ignore ctermfg=black guifg=bg
  hi Operator ctermfg=Red guifg=Red
  hi PreProc term=underline ctermfg=LightBlue guifg=#ff80ff
  hi Repeat term=underline ctermfg=White guifg=LightRed
  hi Special term=bold ctermfg=DarkMagenta guifg=LightRed
  hi Statement term=bold ctermfg=Yellow guifg=#aa4444 gui=bold
  hi Type term=underline ctermfg=LightGreen guifg=#60ff60  gui=bold
else
  hi Comment term=bold ctermfg=DarkBlue guifg=Blue
  hi Constant term=underline ctermfg=DarkRed guifg=Magenta
  hi Identifier term=underline ctermfg=DarkCyan guifg=DarkCyan
  hi Ignore ctermfg=white guifg=bg
  hi PreProc term=underline ctermfg=DarkMagenta guifg=Purple
  hi Special term=bold ctermfg=DarkMagenta guifg=SlateBlue
  hi Statement term=bold ctermfg=Brown guifg=Brown gui=bold 
  hi Type term=underline ctermfg=DarkGreen guifg=SeaGreen gui=bold
endif

hi Error term=reverse ctermbg=Red ctermfg=White guibg=Red guifg=White
hi Todo term=standout ctermbg=Yellow ctermfg=Black guifg=Blue guibg=Yellow

" Common groups that link to default highlighting.
" You can specify other highlighting easily.
hi link String Constant
hi link Character Constant
hi link Number Constant
hi link Boolean Constant
hi link Float Number
hi link Conditional Statement
hi link Label Statement
hi link Keyword Statement
hi link Exception Statement
hi link Include PreProc
hi link Define PreProc
hi link Macro PreProc
hi link PreCondit PreProc
hi link StorageClass Type
hi link Structure Type
hi link Typedef Type
hi link Tag Special
hi link SpecialChar Special
hi link Delimiter Special
hi link SpecialComment Special
hi link Debug Special

" GNUPlot input file read by header:
au BufRead *.gp[ih]\=
      \  if getline(1) =~ '^#!.*\/gnuplot$' |
      \    set ft=gnuplot |
      \ endif

" set LaTeX textwidth to 80 and turn on spell checker
au FileType tex set tw=85 spell

" vim: set fenc=utf-8 tw=80 sw=2 sts=2 et foldmethod=marker
