" {{{ INCLUDES
if filereadable(expand("$HOME/.vimrc.local"))
  so $HOME/.vimrc.local
endif
" }}}

" {{{ BASIC OPTIONS
set sw=2             " auto indent size
set ts=2             " tab size
set et               " use space for tab
set sta              " use sw for front tab, ts else
set sm               " show matching bracket 
set ffs=unix,dos     " refers unix format

set lazyredraw       " Don't update the display while executing macro
set showmode         " Show which mode you are in
set wildmenu         " Enalbed enhanced command-line completion
set mousehide        " hide mouse cursor while typing
set shellslash       " (for windows) use \ for shell
set laststatus=2     " always put a status line in, even if there is only one window
set cot=longest,menu " complete option

" my settings
" Set the status line the way I like it
set stl=%f\ %m\ %r\ Line:\ %l/%L[%p%%]\ Col:\ %c\ Buf:\ #%n\ [%b][0x%B]
" END BASIC }}}

" {{{ KEYMAPS
" {{{ Insert/Command mode motions
" These mapping remove the urge to use the page up/down, home, etc for
" movement
" remap alt-* combo to actual key in terminal mode
"if !has("gui_running") && &term=="xterm"
"  set <M-0>=0
"  set <M-d>=d
"  set <M-e>=e
"  set <M-f>=f
"  set <M-h>=h
"  set <M-j>=j
"  set <M-k>=k
"  set <M-l>=l
"  set <M-u>=u
"endif
" emulate 
"no! <M-b> <PageUp>
"no! <M-f> <PageDown>
"no! <M-d> <Del>
"no! <M-0> <Home>
"no! <M-e> <End>
" use Meta-j/k to go up down popup 
"inoremap <expr> <M-j> pumvisible() ? "\<Down>" : "\<M-j>"
"inoremap <expr> <M-k> pumvisible() ? "\<Up>" : "\<M-k>"
"no! <M-h> <Left>
"no! <M-j> <Down>
"no! <M-k> <Up>
"no! <M-l> <Right>
" highlight first item
"inoremap <expr> <C-n> pumvisible() ? '<C-n>' :
"  \ '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" right exist of insert mode:
ino <silent> <S-esc> <esc>l
"}}}

"{{{ Buffer switch and kill
" Go to previous buffer
nn <silent> ;j :bprevious<cr>
" Go to next buffer
nn <silent> ;k :bnext<cr>
" Delete current buffer
nn <silent> ;dc :bdelete<cr>
nn <silent> ;dc! :bdelete!<cr>
"}}}

"{{{ Window motion
" Move the cursor to the window left of the current one
no <silent> ,h :wincmd h<cr>
" Move the cursor to the window below the current one
no <silent> ,j :wincmd j<cr>
" Move the cursor to the window above the current one
no <silent> ,k :wincmd k<cr>
" Move the cursor to the window right of the current one
no <silent> ,l :wincmd l<cr>
"}}}

"{{{ editing and sourcing {g}vimrc
" edit .vimrc
nn <silent> ,ev :e $MYVIMRC<cr>
nn <silent> ,gev :e $MYGVIMRC<cr>
" source .vimrc
nn <silent> ,sv :so $MYVIMRC<cr>
nn <silent> ,gsv :so $MYGVIMRC<cr>
"}}}

"{{{ Save and Exit
" write
nn <silent> ;vw :w<cr>
nn <silent> ;vwa :wa<cr>
" equivalent to ZZ:
nn <silent> ;vwq :wq<cr>
"nnoremap <silent> ;vw! :w!<cr>
" quite
nn <silent> ;vq :q<cr>
nn <silent> ;vqa :qa<cr>
nn <silent> ;vq! :q!<cr>
"}}}

""{{{ Miscellaneous
" toggle paste mode
nn ,p :set paste!<cr>:set paste?<cr>
" toggle highlighted search
nn ,n :set invhls<cr>:set hls?<cr>
" toggle textwrap
nn ,w :set wrap!<cr>:set wrap?<cr>
" retable entire file
nn ,rr :1,$retab<cr>
" cd to directory of current buffer
nn ,cd :lcd %:p:h<cr>
" display current directory
nn ,pwd :pwd<cr>
"}}}
" END KEYMAPS }}}

" {{{ COLOR SETTINGS
" black background
set background=dark

" The main changes I make to the colours is make Function a tad brighter so
" it's more readable. Also, I prefer darkcyan for my comments. I don't 
" like comments to be "louder" than the actual code.
" This is a hack of the clour section in 
" /usr/share/vim/syntax/syntax.vim

if &background == "dark"
  hi Constant term=underline ctermfg=Magenta guifg=Magenta
  hi Function term=bold  ctermfg=White guifg=LightRed
  hi Identifier term=underline cterm=bold guifg=#40ffff ctermfg=Cyan
  hi Ignore ctermfg=black guifg=bg
  hi Operator ctermfg=Red guifg=Red
  hi PreProc term=underline ctermfg=LightBlue guifg=#ff80ff
  hi Repeat term=underline ctermfg=White guifg=LightRed
  hi Special term=bold ctermfg=DarkMagenta guifg=LightRed
  hi Statement term=bold ctermfg=Yellow guifg=#aa4444 gui=bold
  hi Type term=underline ctermfg=LightGreen guifg=#60ff60  gui=bold
else
  hi Comment term=bold ctermfg=DarkBlue guifg=Blue
  hi Constant term=underline ctermfg=DarkRed guifg=Magenta
  hi Identifier term=underline ctermfg=DarkCyan guifg=DarkCyan
  hi Ignore ctermfg=white guifg=bg
  hi PreProc term=underline ctermfg=DarkMagenta guifg=Purple
  hi Special term=bold ctermfg=DarkMagenta guifg=SlateBlue
  hi Statement term=bold ctermfg=Brown guifg=Brown gui=bold 
  hi Type term=underline ctermfg=DarkGreen guifg=SeaGreen gui=bold
endif

hi Error term=reverse ctermbg=Red ctermfg=White guibg=Red guifg=White
hi Todo term=standout ctermbg=Yellow ctermfg=Black guifg=Blue guibg=Yellow

" Common groups that link to default highlighting.
" You can specify other highlighting easily.
hi link String Constant
hi link Character Constant
hi link Number Constant
hi link Boolean Constant
hi link Float Number
hi link Conditional Statement
hi link Label Statement
hi link Keyword Statement
hi link Exception Statement
hi link Include PreProc
hi link Define PreProc
hi link Macro PreProc
hi link PreCondit PreProc
hi link StorageClass Type
hi link Structure Type
hi link Typedef Type
hi link Tag Special
hi link SpecialChar Special
hi link Delimiter Special
hi link SpecialComment Special
hi link Debug Special
" END COLOR }}}

" {{{ AUTOCOMMANDS
" {{{ GNUPLOT: identify by header
au BufRead *.gp[ih]\=
      \  if getline(1) =~ '^#!.*\/gnuplot$' |
      \    set ft=gnuplot |
      \ endif
" }}}

" {{{ Customize treatment for TeX
" : virtual wrap except for comment
" : swap between screen line file line motion
" : turn on spell checking
au FileType tex setlocal tw=0 spell lbr wrap fo=cl|
      \nnoremap <buffer> gj j|
      \nnoremap <buffer> j gj|
      \nnoremap <buffer> gk k|
      \nnoremap <buffer> k gk
" }}}

" {{{ Python
au FileType python setlocal noet ts=4 sw=4
" }}}

" {{{ Folding issue
au FileType vim setlocal fdm=marker
au FileType xml setlocal fdm=syntax
" }}}
" END AUTOCOMMANDS}}}

" vim: set fenc=utf-8 tw=80 sw=2 sts=2 et foldmethod=marker
