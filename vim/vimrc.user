"" PATHOGEN {
filetype off
"call pathogen#incubate()
let g:pathogen_disabled = []
call add(g:pathogen_disabled, 'vim-snipmate')
call add(g:pathogen_disabled, 'Smart-Tabs')

call pathogen#infect('bundle/{}')
"call pathogen#helptags() "call this when installing new plugins
"call pathogen#infect()

""" BUNDLES {
"virtualenv
let g:virtualenv_directory = '~/.virtualenv'

"syntastic
let g:syntastic_mode_map = { 'mode': 'active',
      \ 'active_filetypes': [],
      \ 'passive_filetypes': [] }

" vim-airline
"if exists("g:airline_theme_map")
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
  let g:airline_theme = "powerlineish"
  let g:airline_section_gutter = "%= [%b:0x%B][hi:%{SyntaxItem()}]"
"endif

"snipmate
""" } end bundle

""" } end pathogen

"" INCLUDES {
if filereadable(expand("$HOME/.vimrc.local"))
  so $HOME/.vimrc.local
elseif filereadable(expand("$HOME/.vim/vimrc.local"))
  so $HOME/.vim/vimrc.local
elseif filereadable(expand("$HOME/_vimrc.local"))
  so $HOME/_vimrc.local
elseif filereadable(expand("$VIM/_vimrc.local"))
  so $VIM/_vimrc.local
else
  filetype plugin indent on
endif

"" } end includes

so $HOME/.vim/funcdef.vim
so $HOME/.vim/keymaps.vim
so $HOME/.vim/colors.vim
so $HOME/.vim/autocmd.vim

"" BASIC OPTIONS {
set shiftwidth=4       " number of spaces to use for autoindenting
set shiftround         " use multiple of shiftwidth when indenting with '<' and '>'
set tabstop=4          " tab size
set noexpandtab        " use space for tab
set smarttab           " use sw for front tab, ts else
set showmatch          " show matching bracket
set ffs=unix,dos       " refers unix format

set nolz               " (lazyredraw) Don't update the display while executing macro
set showmode           " Show which mode you are in
set modeline           " Use modeline to customize setting
set wildmenu           " Enalbed enhanced command-line completion
set mousehide          " hide mouse cursor while typing
set shellslash         " (for windows) use \ for shell
set laststatus=2       " always put a status line in, even if there is only one window
"set diffopt+=iwhite    " ignore white space
set diffopt+=vertical  " not sure why this is not the default.
if exists("&cot")      " (version >= 7.2)
  set cot=longest,menu " complete option
en

set backspace=indent,eol,start " so that backspace works in Windows:
set nobackup
set noswapfile

set list
set listchars=eol:$,tab:>.,trail:.,extends:#,nbsp:.

set number
set relativenumber " show relative number
set scrolloff=10   " vertical padding

"" } end basic

" Set the status line the way I like it
if 1
  "define 3 custom highlight groups
  hi User1 ctermbg=yellow ctermfg=white  guibg=yellow guifg=white
  hi User2 ctermbg=red    ctermfg=white  guibg=red    guifg=white
  hi User3 ctermbg=blue   ctermfg=white  guibg=blue   guifg=white
  hi User4 ctermbg=green  ctermfg=white  guibg=green  guifg=white

  hi User6 ctermbg=red    ctermfg=yellow guibg=red    guifg=green
  hi User7 ctermbg=blue   ctermfg=red    guibg=blue   guifg=yellow
  hi User8 ctermbg=green  ctermfg=blue   guibg=yellow guifg=red

  set stl=
  set stl+=%1*%0.30f            " file path
  set stl+=%#error#%m%1*        " modified flag
  set stl+=%y                   " filetype
  set stl+=[%{&fileformat}]     " [fileformat]
  set stl+=%<                   " cut
  set stl+=%6*ðŸž‚%2*              " transition 1
  set stl+=Buf:#%n              " Buffer number
  set stl+=%7*ðŸž‚%3*              " transition 2
  set stl+=%rLine:\ %l/%L[%p%%] " line number / total [percentage]
  set stl+=%8*ðŸž‚%4*              " transition 3
  set stl+=Col:%c               " Column number[highlight syntax]
  set stl+=[%b-0x%B]            " char under cursor
  "set stl+=[%{synIDattr(synID(line('.'),col('.'),1),'name')}] " hightlight
  set stl+=[hi:%{SyntaxItem()}]
endif

"" vim:fenc=utf-8 tw=80 sw=2 sts=2 et foldmethod=marker foldmarker={,} foldlevel=0 iskeyword+=-
